<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 파일의 경로를 config.xml에 명시해야 한다. -->

<!-- 이 XML의 구조대로 구현될 클래스의 이름 -->
<mapper namespace="ProfessorMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="professor" type="study.spring.hellospring.model.Professor">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="profno" 	column="profno" />
		<result property="name" 	column="name" />
		<result property="userid" 	column="userid" />
		<result property="position" column="position" />
		<result property="sal" 		column="sal" />
		<result property="hiredate" column="hiredate" />
		<result property="comm" 	column="comm" />
		<result property="deptno" 	column="deptno" />
	</resultMap>
	
	<!--
		다중행 조회(목록조회)를 위한 기능 정의
		<select id="메서드이름" resultMap="리턴될 Beans의 id">
	-->
	<select id="selectProfessorList" parameterType="study.spring.hellospring.model.Professor"
	 resultMap="professor">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		SELECT
			profno, name, userid, position, sal, 
			DATE_FORMAT(hiredate, '%Y-%m-%d') AS hiredate, 
			comm, deptno 
		FROM professor
		ORDER BY profno ASC
	</select>
	
	<!--
		단일행 조회(상세보기)를 위한 기능 정의
		대부분의 경우 WHERE절의 조건은 PK값을 활용한다.
		
		WHERE절에 사용할 값을 파라미터로 전달해야 한다.
		MyBatis는 두 개 이상의 파라미터를 전달받지 못하기 때문에,
		파라미터가 필요하면 무조건 Beans객체로 설정.
		
		<select id="메서드이름" parameterType="파라미터의 데이터 타입" 
			resultMap="리턴될 Beans의 id">
	-->
	<select id="selectProfessorItem" parameterType="study.spring.hellospring.model.Professor"
		resultMap="professor">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		SELECT
			profno, name, userid, position, sal, 
			DATE_FORMAT(hiredate, '%Y-%m-%d') AS hiredate, 
			comm, deptno 
		FROM professor
		WHERE profno=#{profno}
	</select>
	
	<!--
		데이터 저장을 위한 기능 정의
		<insert id="메서드이름" parameterType="파라미터의 데이터 타입" 
				useGeneratedKeys="자동증가 일련번호값 리턴 여부" 
				keyProperty="자동증가 일련번호 컬럼명">
	-->
	<insert id="insertProfessorItem" parameterType="study.spring.hellospring.model.Professor"
		useGeneratedKeys="true" keyProperty="profno">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		INSERT INTO professor (
			name, userid, position, sal, hiredate, comm, deptno
		 ) VALUES (
			#{name}, #{userid}, #{position}, #{sal}, #{hiredate}, #{comm}, #{deptno}
		)
	</insert>
	
	<!--
		데이터 삭제를 위한 기능 정의
		<delete id="메서드이름" parameterType="파라미터의 데이터 타입">
	-->
	<delete id="deleteProfessorItem" parameterType="study.spring.hellospring.model.Professor">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		DELETE FROM professor WHERE profno=#{profno}
	</delete>

	<!--
		데이터 갱신을 위한 기능 정의
		<update id="메서드이름" parameterType="파라미터의 데이터 타입">
	-->
	<update id="updateProfessorItem" parameterType="study.spring.hellospring.model.Professor">
		<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
		UPDATE professor SET 
			name=#{name}, userid=#{userid}, position=#{position}, 
			sal=#{sal}, hiredate=#{hiredate}, comm=#{comm}, deptno=#{deptno}
		WHERE profno=#{profno}
	</update>

</mapper>